@model Presentacion.Mvc.App.Models.GanometroModel
<!-- Initialise the component in JavaScript too -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.4.0/umd/react.development.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.4.0/umd/react-dom.development.js"></script>

<img src="~/Image/ganometro.png" />

<div class="contenedor col-md-12 col-sm-12">

    <div class="panel panel-default panel-cust">
        <div class="panel-heading">
            <h4>Ganometro</h4>
        </div>
        <div class="panel-body">
            <div class="form-inline col-md-12" role="form">
                <div class="form-group col-md-5">
                    <div id="app"></div>
                </div>
            </div>
            <div class="form-group col-md-5">
                <div id="app2"></div>
            </div>
        </div>
    </div>
</div>
<div class="panel panel-default panel-cust">
    <div class="panel-heading">
        <h4>Ventas - Nacional</h4>
    </div>
    <div class="panel-body">
        <div id="table" class="cont-tabla-gnometro">
            <table class="table table-bordered dataTables_scroll dataTable no-footer" id="grdResul">
                <thead style=" ">
                    <tr>
                        <th>Semana</th>
                        <th>Dia 1</th>
                        <th>Dia 2</th>
                        <th>Dia 3</th>
                        <th>Dia 4</th>
                        <th>Dia 5</th>
                        <th>Dia 6</th>
                        <th>Dia 7</th>
                    </tr>
                </thead>
                <tbody>

                    @{

                        for (int i = 0; i < 4; i++)
                        {
                        <tr>
                            <td class="cont-data">Semana 1</td>
                            @for (int j = 0; j < 7; j++)
                                {
                                    Random rnd = new Random();
                            <td>
                                <div class="col-md-12 cf">
                                    <div class="col-md-12">@rnd.Next(0, 500) - <span style="color:red">@rnd.Next(0, 100) </span></div>
                                    <div class="col-md-12"> @j.ToString("00")/07/2018</div>
                                </div>
                            </td>
                                }
                        </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="panel panel-default panel-cust">
    <div class="panel-heading">
        <h4>Ventas</h4>
    </div>
    <div class="panel-body">
        <div id="table" class="cont-tabla-gnometro">
            <table class="table table-bordered dataTables_scroll dataTable no-footer" id="grdResul">
                <thead style=" ">
                    <tr>
                        <th>Semana</th>
                        <th>Dia 1</th>
                        <th>Dia 2</th>
                        <th>Dia 3</th>
                        <th>Dia 4</th>
                        <th>Dia 5</th>
                        <th>Dia 6</th>
                        <th>Dia 7</th>
                    </tr>
                </thead>
                <tbody>

                    @{

                        for (int i = 0; i < 4; i++)
                        {
                        <tr>
                            <td class="cont-data">Asesor 1</td>
                            @for (int j = 0; j < 7; j++)
                                {
                                    Random rnd = new Random();
                            <td>
                                <div class="col-md-12 cf">
                                    <div class="col-md-12">@rnd.Next(0, 500) - <span style="color:red">@rnd.Next(0, 100) </span></div>
                                    <div class="col-md-12"> @j.ToString("00")/07/2018</div>
                                </div>
                            </td>
                                }
                        </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    th {
        text-align: center;
    }

    .cont-tabla-gnometro {
        overflow-x: auto;
        text-align: center;
    }

    .panel-cust {
        margin-left: 10%;
        margin-right: 10%;
    }

    .cont-data {
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        /*background-color: red;*/
        height: 80px;
        width: 160px;
    }

    .cf div {
        padding: 0.3em 0.5em;
        /*background-color: blue;*/
    }

    .thermometer .thermometer__percent-current:before, .thermometer .thermometer__percent-current:after, .thermometer .thermometer__draw-b:after, .thermometer .thermometer__draw-b:before {
        content: "";
        margin: auto;
    }

    .thermometer ul.thermometer__statistics {
        font-size: 11px;
        font-style: italic;
        font-weight: 500;
    }

    .thermometer .thermometer__percent-current {
        font-size: 18px;
        font-style: normal;
        font-weight: 500;
    }

    .thermometer ul.thermometer__statistics {
        margin: 0;
        padding: 0;
    }

    .example {
        display: flex;
    }

        .example .thermometer {
            margin: 40px;
        }

    .thermometer--small ul.thermometer__statistics li {
        width: 52px;
        padding-left: 8px;
    }

    .thermometer--small .thermometer__draw-a {
        width: 14px;
    }

        .thermometer--small .thermometer__draw-a:after {
            position: absolute;
            top: initial;
            right: initial;
            bottom: -12px;
            left: -10px;
            width: 34px;
            height: 34px;
        }

    .thermometer--small .thermometer__draw-b:before {
        width: 4px;
    }

    .thermometer--small .thermometer__draw-b:after {
        position: absolute;
        top: 13px;
        right: 0;
        bottom: initial;
        left: 0;
        width: 24px;
        height: 24px;
    }

    .thermometer--small .thermometer__meter {
        width: 4px;
    }

    .thermometer--normal ul.thermometer__statistics li {
        width: 42px;
        padding-left: 13px;
    }

    .thermometer--normal .thermometer__draw-a {
        width: 30px;
    }

        .thermometer--normal .thermometer__draw-a:after {
            position: absolute;
            top: initial;
            right: initial;
            bottom: -20px;
            left: -10px;
            width: 50px;
            height: 50px;
        }

    .thermometer--normal .thermometer__draw-b:before {
        width: 10px;
    }

    .thermometer--normal .thermometer__draw-b:after {
        position: absolute;
        top: 8px;
        right: 0;
        bottom: initial;
        left: 0;
        width: 34px;
        height: 34px;
    }

    .thermometer--normal .thermometer__meter {
        width: 10px;
    }

    .thermometer--large ul.thermometer__statistics li {
        width: 52px;
        padding-left: 34px;
    }

    .thermometer--large .thermometer__draw-a {
        width: 50px;
    }

        .thermometer--large .thermometer__draw-a:after {
            position: absolute;
            top: initial;
            right: initial;
            bottom: -30px;
            left: -10px;
            width: 70px;
            height: 70px;
        }

    .thermometer--large .thermometer__draw-b:before {
        width: 30px;
    }

    .thermometer--large .thermometer__draw-b:after {
        position: absolute;
        top: 0;
        right: 0;
        bottom: initial;
        left: 0;
        width: 50px;
        height: 50px;
    }

    .thermometer--large .thermometer__meter {
        width: 30px;
    }

    .thermometer--theme-light ul.thermometer__statistics li:before {
        background: linear-gradient(90deg, rgba(0, 0, 0, 0.2), transparent);
    }

    .thermometer--theme-light .thermometer__percent-current:after {
        border-left: 8px solid #fff;
    }

    .thermometer--theme-dark .thermometer__meter {
        background-color: #1d1d1d;
    }

    .thermometer--theme-dark ul.thermometer__statistics li {
        color: #fff;
    }

        .thermometer--theme-dark ul.thermometer__statistics li:before {
            background: linear-gradient(90deg, rgba(255, 255, 255, 0.2), transparent);
        }

    .thermometer--theme-dark .thermometer__percent-current {
        color: #fff;
        background-color: #1d1d1d;
    }

        .thermometer--theme-dark .thermometer__percent-current:after {
            border-left: 8px solid #1d1d1d;
        }

    .thermometer {
        width: 100px;
        position: relative;
    }

        .thermometer ul.thermometer__statistics {
            position: absolute;
            top: 0;
            right: initial;
            bottom: initial;
            left: 0;
            height: 100%;
            z-index: 1;
        }

            .thermometer ul.thermometer__statistics li {
                position: absolute;
                top: initial;
                right: initial;
                bottom: initial;
                left: 0;
                list-style: none;
            }

                .thermometer ul.thermometer__statistics li:before {
                    position: absolute;
                    top: initial;
                    right: initial;
                    bottom: -1px;
                    left: 0;
                    content: "";
                    width: 100%;
                    height: 1px;
                }

        .thermometer .thermometer__meter {
            position: absolute;
            top: 12px;
            right: 0;
            bottom: initial;
            left: 0;
            height: calc(100% - 58px);
            margin: auto;
            border-radius: 50px 50px 0 0;
            z-index: 1;
        }

        .thermometer .thermometer__mercury {
            position: absolute;
            top: initial;
            right: initial;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 0;
            border-radius: 50px 50px 0 0;
        }

        .thermometer .thermometer__mask {
            position: absolute;
            top: initial;
            right: initial;
            bottom: -1px;
            left: initial;
            overflow: hidden;
            width: 100%;
            height: 100%;
            border-radius: 50px 50px 0 0;
        }

        .thermometer .thermometer__bg-color {
            position: absolute;
            top: initial;
            right: initial;
            bottom: 0;
            left: initial;
            width: 100%;
            background: linear-gradient(#2196f3, #8bc34a, #f44336);
        }

        .thermometer .thermometer__percent-current {
            position: absolute;
            top: 4px;
            right: initial;
            bottom: initial;
            left: 0;
            -webkit-transform: translateX(calc(-100% - 8px)) translateY(-50%);
            transform: translateX(calc(-100% - 8px)) translateY(-50%);
            padding: 5px 10px;
            border-radius: 2px;
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1), 3px 3px 6px rgba(0, 0, 0, 0.1);
        }

            .thermometer .thermometer__percent-current:before, .thermometer .thermometer__percent-current:after {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: initial;
                width: 0;
                height: 0;
            }

            .thermometer .thermometer__percent-current:after {
                border-top: 6px solid transparent;
                border-bottom: 6px solid transparent;
                -webkit-transform: translateX(calc(100% - 2px)) translateY(0);
                transform: translateX(calc(100% - 2px)) translateY(0);
            }

            .thermometer .thermometer__percent-current:before {
                border-left: 8px solid rgba(0, 0, 0, 0.1);
                border-top: 6px solid transparent;
                border-bottom: 6px solid transparent;
                -webkit-transform: translateX(calc(100% - 0px)) translateY(0);
                transform: translateX(calc(100% - 0px)) translateY(0);
            }

        .thermometer .thermometer__draw-a {
            position: relative;
            height: calc(100% - 20px);
            margin: auto;
            border-radius: 50px 50px 0 0;
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 1px 1px 5px rgba(0, 0, 0, 0.2);
        }

            .thermometer .thermometer__draw-a:after, .thermometer .thermometer__draw-a:before {
                content: "";
            }

            .thermometer .thermometer__draw-a:before {
                position: absolute;
                top: initial;
                right: initial;
                bottom: 0;
                left: 0;
                height: 50px;
                width: 100%;
                z-index: 1;
            }

            .thermometer .thermometer__draw-a:after {
                border-radius: 50%;
                box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 1px 1px 5px rgba(0, 0, 0, 0.2);
            }

        .thermometer .thermometer__draw-b {
            position: absolute;
            top: initial;
            right: 0;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 50px;
            margin: auto;
            z-index: 1;
        }

            .thermometer .thermometer__draw-b:after {
                background-color: #f44336;
                border-radius: 50%;
            }

            .thermometer .thermometer__draw-b:before {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 40px;
                left: 0;
                height: 20px;
                background-color: #f44336;
                border-radius: 50px 50px 0 0;
            }
</style>
<script type="text/javascript">
$(function () {

    $("#FechaVenta").val("");
    $('#datetimepicker1').datepicker({
        format: 'dd/mm/yyyy',
        /**/
        /**/
        /**/
        endDate: '@DateTime.Now.Day/@DateTime.Now.Month/@DateTime.Now.Year'
        /**/
        /**/
        /**/
    });
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) { if (window.CP.shouldStopExecution(1)) { break; } var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); }
        window.CP.exitedLoop(1);
    } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
}();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Thermometer = function (_React$Component) {
    _inherits(Thermometer, _React$Component);

    function Thermometer(props) {
        _classCallCheck(this, Thermometer);

        var _this = _possibleConstructorReturn(this, (Thermometer.__proto__ || Object.getPrototypeOf(Thermometer)).call(this, props));

        _this.state = {
            theme: function theme() {
                return _this.props.theme === 'light' || _this.props.theme === 'dark' ? _this.props.theme : 'light';
            },
            value: _this.props.value || 0, //default 0
            max: _this.props.max || 100, //default 100
            steps: _this.props.steps || 4, //default 4
            format: _this.props.format || '',
            size: function size() {
                return _this.props.size === 'small' || _this.props.size === 'normal' || _this.props.size === 'large' ? _this.props.size : 'normal';
            },
            height: _this.props.height || 200, //default 200
            valstr: function valstr() {
                return _this.state.format + _this.state.value;
            },
            percent: function percent() {
                return _this.state.value / _this.state.max * 100;
            },
            intervals: []
        };

        for (var step = 0; step <= _this.state.steps; step++) {
            if (window.CP.shouldStopExecution(2)) { break; }
            var val = (_this.state.max / _this.state.steps * step).toFixed(2);
            var percent = val / _this.state.max * 100;
            var interval = { percent: percent, label: _this.state.format + val };
            _this.state.intervals.push(interval);
        }
        window.CP.exitedLoop(2);

        return _this;
    }

    _createClass(Thermometer, [{
        key: 'render',
        value: function render() {
            var theme = 'thermometer--theme-' + this.state.theme();
            var size = 'thermometer--' + this.state.size();
            var height = { height: this.state.height + 'px' };
            var heightPercent = { height: this.state.percent() + '%' };
            var heightBgColor = { height: 'calc(' + this.state.height + 'px - 57px)' };
            var valstr = this.state.valstr();
            var stepIntervals = this.state.intervals.map(function (step, i) {
                return React.createElement(
                    'li',
                    { key: i, style: { bottom: 'calc(' + step.percent + '% - 1px)' } },
                    step.label
                );
            });

            return React.createElement(
                'div',
                { style: height, className: 'thermometer ' + size + ' ' + theme },
                React.createElement('div', { className: 'thermometer__draw-a' }),
                React.createElement('div', { className: 'thermometer__draw-b' }),
                React.createElement(
                    'div',
                    { className: 'thermometer__meter' },
                    React.createElement(
                        'ul',
                        { className: 'thermometer__statistics' },
                        stepIntervals
                    ),
                    React.createElement(
                        'div',
                        { style: heightPercent, className: 'thermometer__mercury' },
                        React.createElement(
                            'div',
                            { className: 'thermometer__percent-current' },
                            valstr
                        ),
                        React.createElement(
                            'div',
                            { className: 'thermometer__mask' },
                            React.createElement('div', { className: 'thermometer__bg-color', style: heightBgColor })
                        )
                    )
                )
            );
        }
    }]);

    return Thermometer;
}(React.Component);

ReactDOM.render(React.createElement(
    'div',
    { className: 'example' },
    React.createElement(Thermometer, { theme: 'dark', value: 180, max: 200, format: '$', steps: 3, size: 'normal', height: 180 }),
), document.getElementById('app'));

ReactDOM.render(React.createElement(
    'div',
    { className: 'example' },
    React.createElement(Thermometer, { theme: 'dark', value: 180, max: 200, format: '$', steps: 3, size: 'normal', height: 180 }),
), document.getElementById('app2'));
</script>